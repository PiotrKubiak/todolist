{
  const welcome = () => {
    console.log("Hello developers!!! :) ");
  };

  let tasks = [];
  let hideDoneTasks = false;

  //let tasks jest zmiennÄ…, poniewaÅ¼ za kaÅ¼dym razem nie bÄ™dziemy modyfikowaÄ‡ tylko przypisywaÄ‡ nowÄ… tablicÄ™

  const addNewTask = (newTaskContent) => {
    tasks = [...tasks, { content: newTaskContent }];
    render();
  };

  //funkcja ktÃ³ra dodaje nowy element, bierze sobie tasks kopiuje i tworzy nowÄ… tablicÄ™ i dodaje nowy element
  const deleteTask = (taskIndex) => {
    tasks = [...tasks.slice(0, taskIndex), ...tasks.slice(taskIndex + 1)];
    render();
  };

  // funkcja usuwajÄ…ca zadania, ktÃ³ra wczeÅ›niej bazowaÅ‚a na splice, teraz tworzymy nowÄ… tablicÄ™ tasks, w ktÃ³rej mamy wszystkie taski ktÃ³re sÄ… przed elementem ktÃ³ry chcemy usunÄ…Ä‡ i wszystkie ktÃ³re sÄ… po elemencie do usuniÄ™cia. BÄ™dzie tworzona nowa tablica, ktÃ³ra siÄ™ skÅ‚ada z 2 tablic za pomocÄ… slice

  const toggleTaskDone = (taskIndex) => {
    tasks = [
      ...tasks.slice(0, taskIndex),
      {
        ...tasks[taskIndex],
        done: !tasks[taskIndex].done,
      },
      ...tasks.slice(taskIndex + 1),
    ];
    render();
  };

  // funkcja przeÅ‚Ä…czajÄ…ca gotowe zadania, stworzyliÅ›my nowÄ… tablicÄ™, ktÃ³ra skÅ‚ada siÄ™ ze wszystkich elementÃ³w ktÃ³re byÅ‚y przed (...tasks.slice(0, taskIndex),), ktÃ³re byÅ‚y po (...tasks.slice(taskIndex + 1), i z nowego elementu (...tasks[taskIndex], done: !tasks[taskIndex].done,), ktÃ³ry jest taki sam jak ten element i rÃ³Å¼ni siÄ™ tylko done.

  const markAllTasksDone = () => {
    tasks = tasks.map((task) => ({
      ...task,
      done: true,
    }));

    render();
  };

  //funkcja ktÃ³ra oznacza wszystkie zadania jako wykonane, przelatujemy sobie po zadaniach funkcjÄ… map i zwracamy nowy task ktÃ³ry ma done:true i ktÃ³ry jest skopiowany,

  const toggleHideDoneTasks = () => {
    hideDoneTasks = !hideDoneTasks;
    render();
  };

  //funkcja, ktÃ³ra chowa wszystkie wykonane zadania.

  const bindDeleteEvents = () => {
    const deleteButtons = document.querySelectorAll(".js-delete");

    deleteButtons.forEach((deleteButton, taskIndex) => {
      deleteButton.addEventListener("click", () => {
        deleteTask(taskIndex);
      });
    });
  };

  //funkcja ktÃ³ra usuwa zadania

  const bindToggleDoneEvents = () => {
    const toggleDoneButtons = document.querySelectorAll(".js-toggleDone");

    toggleDoneButtons.forEach((toggleDoneButton, taskIndex) => {
      toggleDoneButton.addEventListener("click", () => {
        toggleTaskDone(taskIndex);
      });
    });
  };

  //funkcja, ktÃ³ra przekreÅ›la gotowe zadania

  const renderTasks = () => {
    const taskToHTML = (
      task
    ) => `                                                           
      <li class="
        tasks__item ${
          task.done && hideDoneTasks ? "tasks__item tasks__item--hidden" : ""
        } js-task
      ">
        <button class="tasks__button tasks__button--toggleDone js-toggleDone"> 
          ${task.done ? "âœ”" : ""}
        </button>
        <span class="tasks__content${task.done ? " tasks__content--done" : ""}">
          ${task.content}
        </span>
        <button class="tasks__button tasks__button--delete js-delete"> 
          ðŸ—‘ 
        </button>                                                     
      </li>
      `;

    const tasksElement = document.querySelector(".js-tasks");
    tasksElement.innerHTML = tasks.map(taskToHTML).join("");
  };

  //funkcja ktÃ³ra dostaje w parametrze task i zwraca HTML'a, ktÃ³ry reprezentuje ten task. Jest tutaj uÅ¼yty map. Mamy tasksElement (js-tasks), bierzemy sobie tablicÄ™ tasks, mapujemy na tablicÄ™ HTML'i (uÅ¼ywajÄ…Ä‡ funkcji taskToHtml) i Å‚Ä…czymy pustym Å‚aÅ„cuchem znakÃ³w, dlatego wszystkie elementy Å‚Ä…czymy w jeden string i wrzucamy do inner HTML.
  // JeÅ›li zadanie jest ukoÅ„czone to dodajemy tasks__item--hidden (w css ukrywa on element)

  const renderButtons = () => {
    const buttonsElement = document.querySelector(".js-buttons");

    if (!tasks.length) {
      buttonsElement.innerHTML = "";
      return;
    }

    buttonsElement.innerHTML = `
      <button class="buttons__button js-toggleHideDoneTasks">
        ${hideDoneTasks ? "PokaÅ¼" : "Ukryj"} ukoÅ„czone
      </button>
      <button 
        class="buttons__button js-markAllDone"
        ${tasks.every(({ done }) => done) ? "disabled" : ""}
      >
        UkoÅ„cz wszystkie
      </button>
    `;
  };

  //funkcja ktÃ³ra dodaje buttony po ukazaniu siÄ™ zadania i ktÃ³ra je renderuje. Buttony majÄ… albo ukrywaÄ‡ ukoÅ„czone zadania albo pokazywaÄ‡, albo oznaczaÄ‡ jako zrobione i nie oznaczaÄ‡.
  //JeÅ›li nie ma Å¼adnych zadaÅ„ to nic nie bÄ™dzie wpisane do buttonsElement. Natomiaast jeÅ›li sÄ… to jest string.
  //FunkcjÄ… every sprawdzamy czy wszystkie zadania sÄ… zrobione i jeÅ›li tak dodajemy atrybut disabled a jeÅ›li nie to go nie dodawaÄ‡.

  const bindButtonsEvents = () => {
    const markAllDoneButton = document.querySelector(".js-markAllDone");

    if (markAllDoneButton) {
      markAllDoneButton.addEventListener("click", markAllTasksDone);
    }

    const toggleHideDoneTasksButton = document.querySelector(
      ".js-toggleHideDoneTasks"
    );

    if (toggleHideDoneTasksButton) {
      toggleHideDoneTasksButton.addEventListener("click", toggleHideDoneTasks);
    }
  };

  //funkcja, ktÃ³ra przypina te eventListener'y, ktÃ³re majÄ… siÄ™ odpaliÄ‡ po klikniÄ™ciu w jeden i drugi przycisk, natomiast te przyciski mogÄ… siÄ™ pojawiÄ‡  ale nie muszÄ… poniewaÅ¼ one siÄ™ renderujÄ… jeÅ›li lista zadaÅ„ nie jest pusta, dla tego mamy tutaj if, prÃ³bujemy sobie zÅ‚apaÅ„ tutaj przycisk markAllDoneButton jeÅ›li on istnieje wtedy dodaje addEventListener, analogicznie z przyciskiem toggleHideDoneTasksButton.

  const render = () => {
    renderTasks();
    bindDeleteEvents();
    bindToggleDoneEvents();

    renderButtons();
    bindButtonsEvents();
  };

  //funkcja wywoÅ‚ujÄ…ca

  const onFormSubmit = (event) => {
    event.preventDefault();

    const newTaskElement = document.querySelector(".js-newTask");
    const newTaskContent = newTaskElement.value.trim();

    if (newTaskContent !== "") {
      addNewTask(newTaskContent);
      newTaskElement.value = "";
    }

    newTaskElement.focus();
  };

  //funkcja dodawajÄ…ca kolejne zadanie

  const init = () => {
    render();

    const form = document.querySelector(".js-form");
    form.addEventListener("submit", onFormSubmit);
  };

  welcome();

  init();
}
