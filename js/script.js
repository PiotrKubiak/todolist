{
  const tasks = [                                                                       //Tablice obiektÃ³w. moÅ¼emy dodawaÄ‡ rÃ³Å¼ne obiekty aby sprawdziÄ‡ jak to bÄ™dzie wyglÄ…daÅ‚o (przykÅ‚adowe)
  ];                                                                                    //JeÅ›li usuniemy bÄ™dziemy mogli dodawaÄ‡ sobie jakÄ…Å› wÅ‚asnÄ… liste

  const deleteTask = (taskIndex) => {                                                   //usuwa dane zadanie dostaje index zadania (taskIndex) i za pomocÄ… metody splice usuwa je. 
    tasks.splice(taskIndex, 1);
    render();
  }

  const toggleTaskDone = (taskIndex) => {                                                //fukcja zmienia done w danym tasku, w tasku mamy taskIndex i teraz done i zaprzeczamy 
    tasks[taskIndex].done = !tasks[taskIndex].done;                                      //teraz do done wpisujemy przeciwieÅ„stwo done
    render();
  }

  const addNewTask = (newTaskContent) => {
    tasks.push({                                                                        //dodaje nowe zadanie, przyjmuje 1 argument, przyjmuje treÅ›Ä‡ (jest bez done)
      content: newTaskContent,
    });
    render();                                                                           //Å¼eby siÄ™ coÅ› wypisaÅ‚o trzeba znowu wywoÅ‚aÄ‡ funkcjÄ™ render
  };

  const bindsdeleteEvents = () => {
    const deleteButtons = document.querySelectorAll(".js-delete");

    deleteButtons.forEach((deleteButton, taskIndex) => {                                    //usuwamy zadania buttonem usuÅ„ index potrzebny Å¼eby przekazaÄ‡ do delete task
      deleteButton.addEventListener("click", () => {
        deleteTask(taskIndex);
      })
    });
  };

  const bindToggleDoneEvents = () => {
    const toggleDoneButtons = document.querySelectorAll(".js-toggleDone");

    toggleDoneButtons.forEach((toggleDoneButton, taskIndex) => {                            //skreÅ›lamy zadania buttonem, skreÅ›la index
      toggleDoneButton.addEventListener("click", () => {
        toggleTaskDone(taskIndex);
      });
    });                                                                                     
  };

  const render = () => {                                                                //funkcja render na podstawie ktÃ³rej wyrenderujÄ… siÄ™ dane
    let htmlString = "";                                                                //pÃ³Åºniej zajmuje siÄ™ tym Å¼eby przypisaÄ‡ to usuwanie do przyciskÃ³w deleteButtons
                                                                                        //po kaÅ¼dej akcji od nowa robi caÅ‚Ä… zawartoÅ›Ä‡ listy, templet stings Å‚Ä…czy siÄ™ html z rÃ³Å¼nymi wyraÅ¼eniami
    for (const task of tasks) {
      htmlString += `                                                           
        <li 
          class= "tasks__item js-task"
        >
          <button class="tasks__button tasks__button--toggleDone js-toggleDone"> 
            ${task.done ? "âœ”" : ""}
          </button>           
            <span class="tasks__content${ task.done ? " tasks__content--done" : ""}">${task.content}</span>
            <button class="tasks__button tasks__button--delete js-delete"> ğŸ—‘ </button>                                                     
        </li>
      `;                                                                                //dodawanie przekreÅ›lenia do zrobionych zadaÅ„
    }

    document.querySelector(".js-tasks").innerHTML = htmlString;

    bindsdeleteEvents();
    bindToggleDoneEvents();
    
  };

  const onFormSubmit = (event) => {                                                   //blokada wysÅ‚ania formularza, biore treÅ›Ä‡ tego inputa i go resetuje
    event.preventDefault();

    const newTaskElement = document.querySelector(".js-newTask");
    const newTaskContent = newTaskElement.value.trim();                              //jeÅ›li tekst pusty nic nie rÃ³b a jaÅ›li coÅ› wpisane dodaje nowe zadanie

    if (newTaskContent !== "") {
      addNewTask(newTaskContent);                                                     //jeÅ›li nie jest pusty dodaje nowe zadanie i resetuje
      newTaskElement.value = "";
    }

      newTaskElement.focus();                                                         //ustawianie focus na inpucie
  }

  const init = () => {                                                                //funkcja init przypisuje do form na submit funkcje onFormSubmit
    render();

    const form = document.querySelector(".js-form");

    form.addEventListener("submit", onFormSubmit);
  };

  init();
}